version "3.3"

Class DemakeShadersHandler : StaticEventHandler
{
	transient ui CVar	vid_aspect,
						gl_demakeshaders_pixmode,
						gl_demakeshaders_lowdetail,
						gl_demakeshaders_targetwt,
						gl_demakeshaders_targetht,
						gl_demakeshaders_palette,
						gl_demakeshaders_dither,
						gl_demakeshaders_paldither,
						gl_demakeshaders_useCLUTatlas;
	transient ui uint8	pixmode,
						lowdetail,
						dither;
	transient ui uint	targetwt,
						targetht,
						palette;
	transient ui float	paldither;
	transient ui bool	atlas;

	override void RenderOverlay( RenderEvent e )
	{
		PlayerInfo p = players[consoleplayer];
		if ( !gl_demakeshaders_pixmode ) gl_demakeshaders_pixmode = CVar.FindCVar('gl_demakeshaders_pixmode');
		if ( !gl_demakeshaders_lowdetail ) gl_demakeshaders_lowdetail = CVar.FindCVar('gl_demakeshaders_lowdetail');
		if ( !gl_demakeshaders_targetwt ) gl_demakeshaders_targetwt = CVar.FindCVar('gl_demakeshaders_targetwt');
		if ( !gl_demakeshaders_targetht ) gl_demakeshaders_targetht = CVar.FindCVar('gl_demakeshaders_targetht');
		if ( !gl_demakeshaders_dither ) gl_demakeshaders_dither = CVar.FindCVar('gl_demakeshaders_dither');
		if ( !gl_demakeshaders_paldither ) gl_demakeshaders_paldither = CVar.FindCVar('gl_demakeshaders_paldither');
		if ( !gl_demakeshaders_useCLUTatlas ) gl_demakeshaders_useCLUTatlas = CVar.FindCVar('gl_demakeshaders_useCLUTatlas');
		if ( !gl_demakeshaders_palette ) gl_demakeshaders_palette = CVar.FindCVar('gl_demakeshaders_palette');
		pixmode = gl_demakeshaders_pixmode.GetInt();
		lowdetail = gl_demakeshaders_lowdetail.GetInt();
		targetwt = gl_demakeshaders_targetwt.GetInt();
		targetht = gl_demakeshaders_targetht.GetInt();
		dither = gl_demakeshaders_dither.GetInt();
		paldither = gl_demakeshaders_paldither.GetFloat();
		atlas = gl_demakeshaders_useCLUTatlas.GetBool();
		palette = gl_demakeshaders_palette.GetInt();

		if ( pixmode == 0 )
		{
			Shader.SetEnabled(p,"Pixelize_Scene",false);
			Shader.SetEnabled(p,"Pixelize_Screen",false);
		}
		else
		{
			switch ( pixmode )
			{
				case 1:
					Shader.SetEnabled(p,"Pixelize_Screen",false);
					Shader.SetEnabled(p,"Pixelize_Scene",true);
					Shader.SetUniform1i(p,"Pixelize_Scene","lowdetail",lowdetail);
					Shader.SetUniform1i(p,"Pixelize_Scene","targetwt",targetwt);
					Shader.SetUniform1i(p,"Pixelize_Scene","targetht",targetht);
					break;
				case 2:
					Shader.SetEnabled(p,"Pixelize_Scene",false);
					Shader.SetEnabled(p,"Pixelize_Screen",true);
					Shader.SetUniform1i(p,"Pixelize_Screen","lowdetail",lowdetail);
					Shader.SetUniform1i(p,"Pixelize_Screen","targetwt",targetwt);
					Shader.SetUniform1i(p,"Pixelize_Screen","targetht",targetht);
					break;
			}
		}

		if ( paldither != 0 )
		{
			if ( dither == 0 )
			{
				Shader.SetEnabled(p,"Dither_Screen",false);
				Shader.SetEnabled(p,"Dither_Scene",true);
				Shader.SetUniform1f(p,"Dither_Scene","paldither",paldither);
				Shader.SetUniform1i(p,"Dither_Scene","pixmode",pixmode);
				Shader.SetUniform1i(p,"Dither_Scene","targetwt",targetwt);
				Shader.SetUniform1i(p,"Dither_Scene","targetht",targetht);
			}
			else
			{
				Shader.SetEnabled(p,"Dither_Scene",false);
				Shader.SetEnabled(p,"Dither_Screen",true);
				Shader.SetUniform1f(p,"Dither_Screen","paldither",paldither);
				Shader.SetUniform1i(p,"Dither_Screen","pixmode",pixmode);
				Shader.SetUniform1i(p,"Dither_Screen","targetwt",targetwt);
				Shader.SetUniform1i(p,"Dither_Screen","targetht",targetht);
			}
		}
		else
		{
			Shader.SetEnabled(p,"Dither_Scene",false);
			Shader.SetEnabled(p,"Dither_Screen",false);
		}

		if ( atlas == 1 )
		{
			if ( palette == 0 )
			{
				DisablePalette(0);
				Shader.SetEnabled(p,"Atlas1_palette",false);
				Shader.SetEnabled(p,"Atlas2_palette",false);
			}
			else
			{
				if ( palette <= 128 )
				{
					if ( palette <= 64 )
					{
						DisablePalette(0);
						Shader.SetEnabled(p,"Atlas1_palette",true);
						Shader.SetUniform1i(p,"Atlas1_palette","palnum",palette-1);
						Shader.SetEnabled(p,"Atlas2_palette",false);
					}
					else
					{
						switch ( palette )
						{
							case 65:
								DisablePalette(0);
								Shader.SetEnabled(p,"Jaguar_palette",true);
								Shader.SetUniform1i(p,"Jaguar_palette","crymode",1);
								Shader.SetEnabled(p,"Atlas1_palette",false);
								break;
							case 66:
								DisablePalette(0);
								Shader.SetEnabled(p,"CRY_palette",true);
								Shader.SetUniform1i(p,"CRY_palette","crymode",2);
								Shader.SetEnabled(p,"Atlas1_palette",false);
								break;
							default:
								DisablePalette(0);
								Shader.SetEnabled(p,"Atlas2_palette",true);
								Shader.SetUniform1i(p,"Atlas2_palette","palnum",palette-65);
								Shader.SetEnabled(p,"Atlas1_palette",false);
						}
					}
				}
			}
		}
		else
		{
			DisablePalette(0);
			Shader.SetEnabled(p,"Atlas1_palette",false);
			Shader.SetEnabled(p,"Atlas2_palette",false);
			switch ( palette )
			{
			case 1:
				Shader.SetEnabled(p,"NES_palette",true);
				break;
			case 2:
				Shader.SetEnabled(p,"NESNTSC_palette",true);
				break;
			case 3:
				Shader.SetEnabled(p,"NESFull_palette",true);
				break;
			case 4:
				Shader.SetEnabled(p,"SegaMaster_palette",true);
				break;
			case 5:
				Shader.SetEnabled(p,"TIANTSC_palette",true);
				break;
			case 6:
				Shader.SetEnabled(p,"TIAPAL_palette",true);
				break;
			case 7:
				Shader.SetEnabled(p,"CTIA_palette",true);
				break;
			case 8:
				Shader.SetEnabled(p,"GTIA_palette",true);
				break;
			case 9:
				Shader.SetEnabled(p,"AppleIIhires_palette",true);
				break;
			case 10:
				Shader.SetEnabled(p,"AppleIIlowres_palette",true);
				break;
			case 11:
				Shader.SetEnabled(p,"CommodoreVIC20Five_palette",true);
				break;
			case 12:
				Shader.SetEnabled(p,"CommodoreVIC20Nine_palette",true);
				break;
			case 13:
				Shader.SetEnabled(p,"Commodore64_palette",true);
				break;
			case 14:
				Shader.SetEnabled(p,"Commodore16Plus4_palette",true);
				break;
			case 15:
				Shader.SetEnabled(p,"TandyColorC3_palette",true);
				break;
			case 16:
				Shader.SetEnabled(p,"ZXSpectrum_palette",true);
				break;
			case 17:
				Shader.SetEnabled(p,"MattelAquarius_palette",true);
				break;
			case 18:
				Shader.SetEnabled(p,"SAMCoupe_palette",true);
				break;
			case 19:
				Shader.SetEnabled(p,"MSX_palette",true);
				break;
			case 20:
				Shader.SetEnabled(p,"MSX2Mode6_palette",true);
				break;
			case 21:
				Shader.SetEnabled(p,"MSX2Mode7_palette",true);
				break;
			case 22:
				Shader.SetEnabled(p,"MSX2Mode8_palette",true);
				break;
			case 23:
				Shader.SetEnabled(p,"ThomsonTO5_palette",true);
				break;
			case 24:
				Shader.SetEnabled(p,"AmstradCPCGreen_palette",true);
				break;
			case 25:
				Shader.SetEnabled(p,"AmstradCPCColor_palette",true);
				break;
			case 26:
				Shader.SetEnabled(p,"CGASimGray_palette",true);
				break;
			case 27:
				Shader.SetEnabled(p,"CGA1High_palette",true);
				break;
			case 28:
				Shader.SetEnabled(p,"CGA1Low_palette",true);
				break;
			case 29:
				Shader.SetEnabled(p,"CGA2High_palette",true);
				break;
			case 30:
				Shader.SetEnabled(p,"CGA2Low_palette",true);
				break;
			case 31:
				Shader.SetEnabled(p,"CGAMode5High_palette",true);
				break;
			case 32:
				Shader.SetEnabled(p,"CGAMode5Low_palette",true);
				break;
			case 33:
				Shader.SetEnabled(p,"CGAplusPCjr_palette",true);
				break;
			case 34:
				Shader.SetEnabled(p,"CGAplusTandy_palette",true);
				break;
			case 35:
				Shader.SetEnabled(p,"AcornRISCOS_palette",true);
				break;
			case 36:
				Shader.SetEnabled(p,"Windows16_palette",true);
				break;
			case 37:
				Shader.SetEnabled(p,"Windows20_palette",true);
				break;
			case 38:
				Shader.SetEnabled(p,"Windows256_palette",true);
				break;
			case 39:
				Shader.SetEnabled(p,"Macintosh16_palette",true);
				break;
			case 40:
				Shader.SetEnabled(p,"Macintosh256_palette",true);
				break;
			case 41:
				Shader.SetEnabled(p,"UNIX_palette",true);
				break;
			case 42:
				Shader.SetEnabled(p,"Web_palette",true);
				break;
			case 43:
				Shader.SetEnabled(p,"676levelsRGB_palette",true);
				break;
			case 44:
				Shader.SetEnabled(p,"676levelsRGBplusGrays_palette",true);
				break;
			case 45:
				Shader.SetEnabled(p,"685levelsRGB_palette",true);
				break;
			case 46:
				Shader.SetEnabled(p,"685levelsRGBplusGrays_palette",true);
				break;
			case 47:
				Shader.SetEnabled(p,"Adaptive_palette",true);
				break;
			case 48:
				Shader.SetEnabled(p,"Selective_palette",true);
				break;
			case 49:
				Shader.SetEnabled(p,"Perceptual_palette",true);
				break;
			case 50:
				Shader.SetEnabled(p,"AmigaCS5_palette",true);
				break;
			case 51:
				Shader.SetEnabled(p,"AmigaCSEHB_palette",true);
				break;
			case 52:
				Shader.SetEnabled(p,"Apple2gs640_palette",true);
				break;
			case 53:
				Shader.SetEnabled(p,"Apple2gs320_palette",true);
				break;
			case 54:
				Shader.SetEnabled(p,"EGA_palette",true);
				break;
			case 55:
				Shader.SetEnabled(p,"VGA_palette",true);
				break;
			case 56:
				Shader.SetEnabled(p,"R1G1B1_palette",true);
				break;
			case 57:
				Shader.SetEnabled(p,"4bitRGBI_palette",true);
				break;
			case 58:
				Shader.SetEnabled(p,"3levelRGB_palette",true);
				break;
			case 59:
				Shader.SetEnabled(p,"R3G3B2_palette",true);
				break;
			case 60:
				Shader.SetEnabled(p,"R3G2B3_palette",true);
				break;
			case 61:
				Shader.SetEnabled(p,"R2G3B3_palette",true);
				break;
			case 62:
				Shader.SetEnabled(p,"R3G3B3_palette",true);
				break;
			case 63:
				Shader.SetEnabled(p,"R4G4B4_palette",true);
				break;
			case 64:
				Shader.SetEnabled(p,"R5G5B5_palette",true);
				break;
			case 65:
				Shader.SetEnabled(p,"Jaguar_palette",true);
				Shader.SetUniform1i(p,"Jaguar_palette","crymode",1);
				break;
			case 66:
				Shader.SetEnabled(p,"CRY_palette",true);
				Shader.SetUniform1i(p,"CRY_palette","crymode",2);
				break;
			case 67:
				Shader.SetEnabled(p,"R5G5B5I1_palette",true);
				break;
			case 68:
				Shader.SetEnabled(p,"R5G6B5_palette",true);
				break;
			case 69:
				Shader.SetEnabled(p,"R6G6B6_palette",true);
				break;
			case 70:
				Shader.SetEnabled(p,"8bitGrayscale_palette",true);
				break;
			case 71:
				Shader.SetEnabled(p,"4bitGrayscale_palette",true);
				break;
			case 72:
				Shader.SetEnabled(p,"2bitGrayscale_palette",true);
				break;
			case 73:
				Shader.SetEnabled(p,"2bitGreenscale_palette",true);
				break;
			case 74:
				Shader.SetEnabled(p,"2bitAmberscale_palette",true);
				break;
			case 75:
				Shader.SetEnabled(p,"2bitWhiteCRT_palette",true);
				break;
			case 76:
				Shader.SetEnabled(p,"2bitPlasma_palette",true);
				break;
			case 77:
				Shader.SetEnabled(p,"Monochrome_palette",true);
				break;
			case 78:
				Shader.SetEnabled(p,"MonoGreen_palette",true);
				break;
			case 79:
				Shader.SetEnabled(p,"MonoAmber_palette",true);
				break;
			case 80:
				Shader.SetEnabled(p,"MonoWhiteCRT_palette",true);
				break;
			case 81:
				Shader.SetEnabled(p,"MonoPlasma_palette",true);
				break;
			case 82:
				Shader.SetEnabled(p,"MonoLCD_palette",true);
				break;
			case 83:
				Shader.SetEnabled(p,"GameBoyPocket_palette",true);
				break;
			case 84:
				Shader.SetEnabled(p,"SGB1A_palette",true);
				break;
			case 85:
				Shader.SetEnabled(p,"SGB1B_palette",true);
				break;
			case 86:
				Shader.SetEnabled(p,"SGB1C_palette",true);
				break;
			case 87:
				Shader.SetEnabled(p,"SGB1D_palette",true);
				break;
			case 88:
				Shader.SetEnabled(p,"SGB1E_palette",true);
				break;
			case 89:
				Shader.SetEnabled(p,"SGB1F_palette",true);
				break;
			case 90:
				Shader.SetEnabled(p,"SGB1G_palette",true);
				break;
			case 91:
				Shader.SetEnabled(p,"SGB1H_palette",true);
				break;
			case 92:
				Shader.SetEnabled(p,"SGB2A_palette",true);
				break;
			case 93:
				Shader.SetEnabled(p,"SGB2B_palette",true);
				break;
			case 94:
				Shader.SetEnabled(p,"SGB2C_palette",true);
				break;
			case 95:
				Shader.SetEnabled(p,"SGB2D_palette",true);
				break;
			case 96:
				Shader.SetEnabled(p,"SGB2E_palette",true);
				break;
			case 97:
				Shader.SetEnabled(p,"SGB2F_palette",true);
				break;
			case 98:
				Shader.SetEnabled(p,"SGB2G_palette",true);
				break;
			case 99:
				Shader.SetEnabled(p,"SGB2H_palette",true);
				break;
			case 100:
				Shader.SetEnabled(p,"SGB3A_palette",true);
				break;
			case 101:
				Shader.SetEnabled(p,"SGB3B_palette",true);
				break;
			case 102:
				Shader.SetEnabled(p,"SGB3C_palette",true);
				break;
			case 103:
				Shader.SetEnabled(p,"SGB3D_palette",true);
				break;
			case 104:
				Shader.SetEnabled(p,"SGB3E_palette",true);
				break;
			case 105:
				Shader.SetEnabled(p,"SGB3F_palette",true);
				break;
			case 106:
				Shader.SetEnabled(p,"SGB3G_palette",true);
				break;
			case 107:
				Shader.SetEnabled(p,"SGB3H_palette",true);
				break;
			case 108:
				Shader.SetEnabled(p,"SGB4A_palette",true);
				break;
			case 109:
				Shader.SetEnabled(p,"SGB4B_palette",true);
				break;
			case 110:
				Shader.SetEnabled(p,"SGB4C_palette",true);
				break;
			case 111:
				Shader.SetEnabled(p,"SGB4D_palette",true);
				break;
			case 112:
				Shader.SetEnabled(p,"SGB4E_palette",true);
				break;
			case 113:
				Shader.SetEnabled(p,"SGB4F_palette",true);
				break;
			case 114:
				Shader.SetEnabled(p,"SGB4G_palette",true);
				break;
			case 115:
				Shader.SetEnabled(p,"SGB4H_palette",true);
				break;
			case 116:
				Shader.SetEnabled(p,"GBCR_palette",true);
				break;
			case 117:
				Shader.SetEnabled(p,"GBCDA_palette",true);
				break;
			case 118:
				Shader.SetEnabled(p,"GBCU_palette",true);
				break;
			case 119:
				Shader.SetEnabled(p,"GBCRB_palette",true);
				break;
			case 120:
				Shader.SetEnabled(p,"GBCLB_palette",true);
				break;
			case 121:
				Shader.SetEnabled(p,"GBCD_palette",true);
				break;
			case 122:
				Shader.SetEnabled(p,"GBCUB_palette",true);
				break;
			case 123:
				Shader.SetEnabled(p,"GBCRA_palette",true);
				break;
			case 124:
				Shader.SetEnabled(p,"GBCLA_palette",true);
				break;
			case 125:
				Shader.SetEnabled(p,"GBCUA_palette",true);
				break;
			case 126:
				Shader.SetEnabled(p,"GBCL_palette",true);
				break;
			case 127:
				Shader.SetEnabled(p,"GBCDB_palette",true);
				break;
			case 128:
				Shader.SetEnabled(p,"GameBoy_palette",true);
				break;
			default:
				DisablePalette(0);
			}
		}
	}


	ui void DisablePalette(int pal)
	{
		PlayerInfo p = players[consoleplayer];
		switch (pal)
		{
		case 1:
			Shader.SetEnabled(p,"NES_palette",false);
			break;
		case 2:
			Shader.SetEnabled(p,"NESNTSC_palette",false);
			break;
		case 3:
			Shader.SetEnabled(p,"NESFull_palette",false);
			break;
		case 4:
			Shader.SetEnabled(p,"SegaMaster_palette",false);
			break;
		case 5:
			Shader.SetEnabled(p,"TIANTSC_palette",false);
			break;
		case 6:
			Shader.SetEnabled(p,"TIAPAL_palette",false);
			break;
		case 7:
			Shader.SetEnabled(p,"CTIA_palette",false);
			break;
		case 8:
			Shader.SetEnabled(p,"GTIA_palette",false);
			break;
		case 9:
			Shader.SetEnabled(p,"AppleIIhires_palette",false);
			break;
		case 10:
			Shader.SetEnabled(p,"AppleIIlowres_palette",false);
			break;
		case 11:
			Shader.SetEnabled(p,"CommodoreVIC20Five_palette",false);
			break;
		case 12:
			Shader.SetEnabled(p,"CommodoreVIC20Nine_palette",false);
			break;
		case 13:
			Shader.SetEnabled(p,"Commodore64_palette",false);
			break;
		case 14:
			Shader.SetEnabled(p,"Commodore16Plus4_palette",false);
			break;
		case 15:
			Shader.SetEnabled(p,"TandyColorC3_palette",false);
			break;
		case 16:
			Shader.SetEnabled(p,"ZXSpectrum_palette",false);
			break;
		case 17:
			Shader.SetEnabled(p,"MattelAquarius_palette",false);
			break;
		case 18:
			Shader.SetEnabled(p,"SAMCoupe_palette",false);
			break;
		case 19:
			Shader.SetEnabled(p,"MSX_palette",false);
			break;
		case 20:
			Shader.SetEnabled(p,"MSX2Mode6_palette",false);
			break;
		case 21:
			Shader.SetEnabled(p,"MSX2Mode7_palette",false);
			break;
		case 22:
			Shader.SetEnabled(p,"MSX2Mode8_palette",false);
			break;
		case 23:
			Shader.SetEnabled(p,"ThomsonTO5_palette",false);
			break;
		case 24:
			Shader.SetEnabled(p,"AmstradCPCGreen_palette",false);
			break;
		case 25:
			Shader.SetEnabled(p,"AmstradCPCColor_palette",false);
			break;
		case 26:
			Shader.SetEnabled(p,"CGASimGray_palette",false);
			break;
		case 27:
			Shader.SetEnabled(p,"CGA1High_palette",false);
			break;
		case 28:
			Shader.SetEnabled(p,"CGA1Low_palette",false);
			break;
		case 29:
			Shader.SetEnabled(p,"CGA2High_palette",false);
			break;
		case 30:
			Shader.SetEnabled(p,"CGA2Low_palette",false);
			break;
		case 31:
			Shader.SetEnabled(p,"CGAMode5High_palette",false);
			break;
		case 32:
			Shader.SetEnabled(p,"CGAMode5Low_palette",false);
			break;
		case 33:
			Shader.SetEnabled(p,"CGAplusPCjr_palette",false);
			break;
		case 34:
			Shader.SetEnabled(p,"CGAplusTandy_palette",false);
			break;
		case 35:
			Shader.SetEnabled(p,"AcornRISCOS_palette",false);
			break;
		case 36:
			Shader.SetEnabled(p,"Windows16_palette",false);
			break;
		case 37:
			Shader.SetEnabled(p,"Windows20_palette",false);
			break;
		case 38:
			Shader.SetEnabled(p,"Windows256_palette",false);
			break;
		case 39:
			Shader.SetEnabled(p,"Macintosh16_palette",false);
			break;
		case 40:
			Shader.SetEnabled(p,"Macintosh256_palette",false);
			break;
		case 41:
			Shader.SetEnabled(p,"UNIX_palette",false);
			break;
		case 42:
			Shader.SetEnabled(p,"Web_palette",false);
			break;
		case 43:
			Shader.SetEnabled(p,"676levelsRGB_palette",false);
			break;
		case 44:
			Shader.SetEnabled(p,"676levelsRGBplusGrays_palette",false);
			break;
		case 45:
			Shader.SetEnabled(p,"685levelsRGB_palette",false);
			break;
		case 46:
			Shader.SetEnabled(p,"685levelsRGBplusGrays_palette",false);
			break;
		case 47:
			Shader.SetEnabled(p,"Adaptive_palette",false);
			break;
		case 48:
			Shader.SetEnabled(p,"Selective_palette",false);
			break;
		case 49:
			Shader.SetEnabled(p,"Perceptual_palette",false);
			break;
		case 50:
			Shader.SetEnabled(p,"AmigaCS5_palette",false);
			break;
		case 51:
			Shader.SetEnabled(p,"AmigaCSEHB_palette",false);
			break;
		case 52:
			Shader.SetEnabled(p,"Apple2gs640_palette",false);
			break;
		case 53:
			Shader.SetEnabled(p,"Apple2gs320_palette",false);
			break;
		case 54:
			Shader.SetEnabled(p,"EGA_palette",false);
			break;
		case 55:
			Shader.SetEnabled(p,"VGA_palette",false);
			break;
		case 56:
			Shader.SetEnabled(p,"R1G1B1_palette",false);
			break;
		case 57:
			Shader.SetEnabled(p,"4bitRGBI_palette",false);
			break;
		case 58:
			Shader.SetEnabled(p,"3levelRGB_palette",false);
			break;
		case 59:
			Shader.SetEnabled(p,"R3G3B2_palette",false);
			break;
		case 60:
			Shader.SetEnabled(p,"R3G2B3_palette",false);
			break;
		case 61:
			Shader.SetEnabled(p,"R2G3B3_palette",false);
			break;
		case 62:
			Shader.SetEnabled(p,"R3G3B3_palette",false);
			break;
		case 63:
			Shader.SetEnabled(p,"R4G4B4_palette",false);
			break;
		case 64:
			Shader.SetEnabled(p,"R5G5B5_palette",false);
			break;
		case 65:
			Shader.SetEnabled(p,"Jaguar_palette",false);
			break;
		case 66:
			Shader.SetEnabled(p,"CRY_palette",false);
			break;
		case 67:
			Shader.SetEnabled(p,"R5G5B5I1_palette",false);
			break;
		case 68:
			Shader.SetEnabled(p,"R5G6B5_palette",false);
			break;
		case 69:
			Shader.SetEnabled(p,"R6G6B6_palette",false);
			break;
		case 70:
			Shader.SetEnabled(p,"8bitGrayscale_palette",false);
			break;
		case 71:
			Shader.SetEnabled(p,"4bitGrayscale_palette",false);
			break;
		case 72:
			Shader.SetEnabled(p,"2bitGrayscale_palette",false);
			break;
		case 73:
			Shader.SetEnabled(p,"2bitGreenscale_palette",false);
			break;
		case 74:
			Shader.SetEnabled(p,"2bitAmberscale_palette",false);
			break;
		case 75:
			Shader.SetEnabled(p,"2bitWhiteCRT_palette",false);
			break;
		case 76:
			Shader.SetEnabled(p,"2bitPlasma_palette",false);
			break;
		case 77:
			Shader.SetEnabled(p,"Monochrome_palette",false);
			break;
		case 78:
			Shader.SetEnabled(p,"MonoGreen_palette",false);
			break;
		case 79:
			Shader.SetEnabled(p,"MonoAmber_palette",false);
			break;
		case 80:
			Shader.SetEnabled(p,"MonoWhiteCRT_palette",false);
			break;
		case 81:
			Shader.SetEnabled(p,"MonoPlasma_palette",false);
			break;
		case 82:
			Shader.SetEnabled(p,"MonoLCD_palette",false);
			break;
		case 83:
			Shader.SetEnabled(p,"GameBoyPocket_palette",false);
			break;
		case 84:
			Shader.SetEnabled(p,"SGB1A_palette",false);
			break;
		case 85:
			Shader.SetEnabled(p,"SGB1B_palette",false);
			break;
		case 86:
			Shader.SetEnabled(p,"SGB1C_palette",false);
			break;
		case 87:
			Shader.SetEnabled(p,"SGB1D_palette",false);
			break;
		case 88:
			Shader.SetEnabled(p,"SGB1E_palette",false);
			break;
		case 89:
			Shader.SetEnabled(p,"SGB1F_palette",false);
			break;
		case 90:
			Shader.SetEnabled(p,"SGB1G_palette",false);
			break;
		case 91:
			Shader.SetEnabled(p,"SGB1H_palette",false);
			break;
		case 92:
			Shader.SetEnabled(p,"SGB2A_palette",false);
			break;
		case 93:
			Shader.SetEnabled(p,"SGB2B_palette",false);
			break;
		case 94:
			Shader.SetEnabled(p,"SGB2C_palette",false);
			break;
		case 95:
			Shader.SetEnabled(p,"SGB2D_palette",false);
			break;
		case 96:
			Shader.SetEnabled(p,"SGB2E_palette",false);
			break;
		case 97:
			Shader.SetEnabled(p,"SGB2F_palette",false);
			break;
		case 98:
			Shader.SetEnabled(p,"SGB2G_palette",false);
			break;
		case 99:
			Shader.SetEnabled(p,"SGB2H_palette",false);
			break;
		case 100:
			Shader.SetEnabled(p,"SGB3A_palette",false);
			break;
		case 101:
			Shader.SetEnabled(p,"SGB3B_palette",false);
			break;
		case 102:
			Shader.SetEnabled(p,"SGB3C_palette",false);
			break;
		case 103:
			Shader.SetEnabled(p,"SGB3D_palette",false);
			break;
		case 104:
			Shader.SetEnabled(p,"SGB3E_palette",false);
			break;
		case 105:
			Shader.SetEnabled(p,"SGB3F_palette",false);
			break;
		case 106:
			Shader.SetEnabled(p,"SGB3G_palette",false);
			break;
		case 107:
			Shader.SetEnabled(p,"SGB3H_palette",false);
			break;
		case 108:
			Shader.SetEnabled(p,"SGB4A_palette",false);
			break;
		case 109:
			Shader.SetEnabled(p,"SGB4B_palette",false);
			break;
		case 110:
			Shader.SetEnabled(p,"SGB4C_palette",false);
			break;
		case 111:
			Shader.SetEnabled(p,"SGB4D_palette",false);
			break;
		case 112:
			Shader.SetEnabled(p,"SGB4E_palette",false);
			break;
		case 113:
			Shader.SetEnabled(p,"SGB4F_palette",false);
			break;
		case 114:
			Shader.SetEnabled(p,"SGB4G_palette",false);
			break;
		case 115:
			Shader.SetEnabled(p,"SGB4H_palette",false);
			break;
		case 116:
			Shader.SetEnabled(p,"GBCR_palette",false);
			break;
		case 117:
			Shader.SetEnabled(p,"GBCDA_palette",false);
			break;
		case 118:
			Shader.SetEnabled(p,"GBCU_palette",false);
			break;
		case 119:
			Shader.SetEnabled(p,"GBCRB_palette",false);
			break;
		case 120:
			Shader.SetEnabled(p,"GBCLB_palette",false);
			break;
		case 121:
			Shader.SetEnabled(p,"GBCD_palette",false);
			break;
		case 122:
			Shader.SetEnabled(p,"GBCUB_palette",false);
			break;
		case 123:
			Shader.SetEnabled(p,"GBCRA_palette",false);
			break;
		case 124:
			Shader.SetEnabled(p,"GBCLA_palette",false);
			break;
		case 125:
			Shader.SetEnabled(p,"GBCUA_palette",false);
			break;
		case 126:
			Shader.SetEnabled(p,"GBCL_palette",false);
			break;
		case 127:
			Shader.SetEnabled(p,"GBCDB_palette",false);
			break;
		case 128:
			Shader.SetEnabled(p,"GameBoy_palette",false);
			break;
		Default:
			Shader.SetEnabled(p,"NES_palette",false);
			Shader.SetEnabled(p,"NESNTSC_palette",false);
			Shader.SetEnabled(p,"NESFull_palette",false);
			Shader.SetEnabled(p,"SegaMaster_palette",false);
			Shader.SetEnabled(p,"TIANTSC_palette",false);
			Shader.SetEnabled(p,"TIAPAL_palette",false);
			Shader.SetEnabled(p,"CTIA_palette",false);
			Shader.SetEnabled(p,"GTIA_palette",false);
			Shader.SetEnabled(p,"AppleIIhires_palette",false);
			Shader.SetEnabled(p,"AppleIIlowres_palette",false);
			Shader.SetEnabled(p,"CommodoreVIC20Five_palette",false);
			Shader.SetEnabled(p,"CommodoreVIC20Nine_palette",false);
			Shader.SetEnabled(p,"Commodore64_palette",false);
			Shader.SetEnabled(p,"Commodore16Plus4_palette",false);
			Shader.SetEnabled(p,"TandyColorC3_palette",false);
			Shader.SetEnabled(p,"ZXSpectrum_palette",false);
			Shader.SetEnabled(p,"MattelAquarius_palette",false);
			Shader.SetEnabled(p,"SAMCoupe_palette",false);
			Shader.SetEnabled(p,"MSX_palette",false);
			Shader.SetEnabled(p,"MSX2Mode6_palette",false);
			Shader.SetEnabled(p,"MSX2Mode7_palette",false);
			Shader.SetEnabled(p,"MSX2Mode8_palette",false);
			Shader.SetEnabled(p,"ThomsonTO5_palette",false);
			Shader.SetEnabled(p,"AmstradCPCGreen_palette",false);
			Shader.SetEnabled(p,"AmstradCPCColor_palette",false);
			Shader.SetEnabled(p,"CGASimGray_palette",false);
			Shader.SetEnabled(p,"CGA1High_palette",false);
			Shader.SetEnabled(p,"CGA1Low_palette",false);
			Shader.SetEnabled(p,"CGA2High_palette",false);
			Shader.SetEnabled(p,"CGA2Low_palette",false);
			Shader.SetEnabled(p,"CGAMode5High_palette",false);
			Shader.SetEnabled(p,"CGAMode5Low_palette",false);
			Shader.SetEnabled(p,"CGAplusPCjr_palette",false);
			Shader.SetEnabled(p,"CGAplusTandy_palette",false);
			Shader.SetEnabled(p,"AcornRISCOS_palette",false);
			Shader.SetEnabled(p,"Windows16_palette",false);
			Shader.SetEnabled(p,"Windows20_palette",false);
			Shader.SetEnabled(p,"Windows256_palette",false);
			Shader.SetEnabled(p,"Macintosh16_palette",false);
			Shader.SetEnabled(p,"Macintosh256_palette",false);
			Shader.SetEnabled(p,"UNIX_palette",false);
			Shader.SetEnabled(p,"Web_palette",false);
			Shader.SetEnabled(p,"676levelsRGB_palette",false);
			Shader.SetEnabled(p,"676levelsRGBplusGrays_palette",false);
			Shader.SetEnabled(p,"685levelsRGB_palette",false);
			Shader.SetEnabled(p,"685levelsRGBplusGrays_palette",false);
			Shader.SetEnabled(p,"Adaptive_palette",false);
			Shader.SetEnabled(p,"Selective_palette",false);
			Shader.SetEnabled(p,"Perceptual_palette",false);
			Shader.SetEnabled(p,"AmigaCS5_palette",false);
			Shader.SetEnabled(p,"AmigaCSEHB_palette",false);
			Shader.SetEnabled(p,"Apple2gs640_palette",false);
			Shader.SetEnabled(p,"Apple2gs320_palette",false);
			Shader.SetEnabled(p,"EGA_palette",false);
			Shader.SetEnabled(p,"VGA_palette",false);
			Shader.SetEnabled(p,"R1G1B1_palette",false);
			Shader.SetEnabled(p,"4bitRGBI_palette",false);
			Shader.SetEnabled(p,"3levelRGB_palette",false);
			Shader.SetEnabled(p,"R3G3B2_palette",false);
			Shader.SetEnabled(p,"R3G2B3_palette",false);
			Shader.SetEnabled(p,"R2G3B3_palette",false);
			Shader.SetEnabled(p,"R3G3B3_palette",false);
			Shader.SetEnabled(p,"R4G4B4_palette",false);
			Shader.SetEnabled(p,"R5G5B5_palette",false);
			Shader.SetEnabled(p,"Jaguar_palette",false);
			Shader.SetEnabled(p,"CRY_palette",false);
			Shader.SetEnabled(p,"R5G5B5I1_palette",false);
			Shader.SetEnabled(p,"R5G6B5_palette",false);
			Shader.SetEnabled(p,"R6G6B6_palette",false);
			Shader.SetEnabled(p,"8bitGrayscale_palette",false);
			Shader.SetEnabled(p,"4bitGrayscale_palette",false);
			Shader.SetEnabled(p,"2bitGrayscale_palette",false);
			Shader.SetEnabled(p,"2bitGreenscale_palette",false);
			Shader.SetEnabled(p,"2bitAmberscale_palette",false);
			Shader.SetEnabled(p,"2bitWhiteCRT_palette",false);
			Shader.SetEnabled(p,"2bitPlasma_palette",false);
			Shader.SetEnabled(p,"Monochrome_palette",false);
			Shader.SetEnabled(p,"MonoGreen_palette",false);
			Shader.SetEnabled(p,"MonoAmber_palette",false);
			Shader.SetEnabled(p,"MonoWhiteCRT_palette",false);
			Shader.SetEnabled(p,"MonoPlasma_palette",false);
			Shader.SetEnabled(p,"MonoLCD_palette",false);
			Shader.SetEnabled(p,"GameBoyPocket_palette",false);
			Shader.SetEnabled(p,"SGB1A_palette",false);
			Shader.SetEnabled(p,"SGB1B_palette",false);
			Shader.SetEnabled(p,"SGB1C_palette",false);
			Shader.SetEnabled(p,"SGB1D_palette",false);
			Shader.SetEnabled(p,"SGB1E_palette",false);
			Shader.SetEnabled(p,"SGB1F_palette",false);
			Shader.SetEnabled(p,"SGB1G_palette",false);
			Shader.SetEnabled(p,"SGB1H_palette",false);
			Shader.SetEnabled(p,"SGB2A_palette",false);
			Shader.SetEnabled(p,"SGB2B_palette",false);
			Shader.SetEnabled(p,"SGB2C_palette",false);
			Shader.SetEnabled(p,"SGB2D_palette",false);
			Shader.SetEnabled(p,"SGB2E_palette",false);
			Shader.SetEnabled(p,"SGB2F_palette",false);
			Shader.SetEnabled(p,"SGB2G_palette",false);
			Shader.SetEnabled(p,"SGB2H_palette",false);
			Shader.SetEnabled(p,"SGB3A_palette",false);
			Shader.SetEnabled(p,"SGB3B_palette",false);
			Shader.SetEnabled(p,"SGB3C_palette",false);
			Shader.SetEnabled(p,"SGB3D_palette",false);
			Shader.SetEnabled(p,"SGB3E_palette",false);
			Shader.SetEnabled(p,"SGB3F_palette",false);
			Shader.SetEnabled(p,"SGB3G_palette",false);
			Shader.SetEnabled(p,"SGB3H_palette",false);
			Shader.SetEnabled(p,"SGB4A_palette",false);
			Shader.SetEnabled(p,"SGB4B_palette",false);
			Shader.SetEnabled(p,"SGB4C_palette",false);
			Shader.SetEnabled(p,"SGB4D_palette",false);
			Shader.SetEnabled(p,"SGB4E_palette",false);
			Shader.SetEnabled(p,"SGB4F_palette",false);
			Shader.SetEnabled(p,"SGB4G_palette",false);
			Shader.SetEnabled(p,"SGB4H_palette",false);
			Shader.SetEnabled(p,"GBCR_palette",false);
			Shader.SetEnabled(p,"GBCDA_palette",false);
			Shader.SetEnabled(p,"GBCU_palette",false);
			Shader.SetEnabled(p,"GBCRB_palette",false);
			Shader.SetEnabled(p,"GBCLB_palette",false);
			Shader.SetEnabled(p,"GBCD_palette",false);
			Shader.SetEnabled(p,"GBCUB_palette",false);
			Shader.SetEnabled(p,"GBCRA_palette",false);
			Shader.SetEnabled(p,"GBCLA_palette",false);
			Shader.SetEnabled(p,"GBCUA_palette",false);
			Shader.SetEnabled(p,"GBCL_palette",false);
			Shader.SetEnabled(p,"GBCDB_palette",false);
			Shader.SetEnabled(p,"GameBoy_palette",false);
		}
	}


	override void ConsoleProcess( ConsoleEvent e )
	{
		PlayerInfo p = players[consoleplayer];
		if ( e.Name ~== "resetdemakeshadersdith" )
		{
			switch( e.args[0] )
			{
			case 0:
				if ( !gl_demakeshaders_paldither ) gl_demakeshaders_paldither = CVar.FindCVar('gl_demakeshaders_paldither');
				gl_demakeshaders_paldither.ResetToDefault();
				break;
			}
		}
		if ( e.Name ~== "demakeshaders_targetres" )
		{
			if ( !gl_demakeshaders_targetwt ) gl_demakeshaders_targetwt = CVar.FindCVar('gl_demakeshaders_targetwt');
			if ( !gl_demakeshaders_targetht ) gl_demakeshaders_targetht = CVar.FindCVar('gl_demakeshaders_targetht');
			if ( !vid_aspect ) vid_aspect = CVar.FindCVar('vid_aspect');
			gl_demakeshaders_targetwt.SetInt( e.args[0] );
			gl_demakeshaders_targetht.SetInt( e.args[1] );
			vid_aspect.SetInt( e.args[2] );
		}
	}
}